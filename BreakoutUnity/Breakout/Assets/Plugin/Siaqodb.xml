<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Siaqodb</name>
  </assembly>
  <members>
    <member name="T:Sqo.Attributes.DocumentAttribute">
      <summary>
            Make property to be stored as a Document-a snapshot of current object.
            </summary>
    </member>
    <member name="T:Sqo.Attributes.IgnoreAttribute">
      <summary>
            Attribute to be used for a member of a storable class and that object will be ignored by siaqodb engine
            </summary>
    </member>
    <member name="T:Sqo.Attributes.LazyLoadAttribute">
      <summary>
            The property/field will not be loaded by default, it will be loaded by using Include(...) method
            </summary>
    </member>
    <member name="T:Sqo.Attributes.MaxLengthAttribute">
      <summary>
            Attribute to be used for a member of type String of a storable class to limit Length of a string object to be stored in database 
            </summary>
    </member>
    <member name="M:Sqo.Attributes.MaxLengthAttribute.#ctor(System.Int32)">
      <summary>
            Create an attribute instance of Type MaxLength
            </summary>
      <param name="maxLength">number of characters from string to be stored in database</param>
    </member>
    <member name="T:Sqo.Attributes.UseVariableAttribute">
      <summary>
            Use this attribute if you use a Property and inside that
            property use some complex code and when Siaqodb engine is not able 
            to get what is backing field of that Property, variableName is used for Siaqodb engine when that property is used
            
            </summary>
    </member>
    <member name="M:Sqo.Configurator.AddIndex(System.String,System.Type)">
      <summary>
            Add an index for a field or automatic property of a certain Type,an Index can be added also by using Attribute: Sqo.Attributes.Index;
            both ways of adding index are similar
            </summary>
      <param name="field">Field name or automatic property name</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.Configurator.AddUniqueConstraint(System.String,System.Type)">
      <summary>
            Add an UniqueConstraint for a field of a certain Type,an UniqueConstraint can be added also by using Attribute: Sqo.Attributes.UniqueConstraint;
            both ways of adding UniqueConstraint are similar
            </summary>
      <param name="field">Field name or automatic property name</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.Configurator.AddMaxLength(System.String,System.Int32,System.Type)">
      <summary>
            Put MaxLength for a string field or automatic property of a Type, MaxLength can be set also by using Attribute: Sqo.Attributes.MaxLength
            </summary>
      <param name="field">Field name or automatic property name</param>
      <param name="maxLength">max length for a string</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.Configurator.AddIgnore(System.String,System.Type)">
      <summary>
            Ignore a field or automatic property to be stored
            </summary>
      <param name="field">Name of field or automatic property</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.Configurator.AddText(System.String,System.Type)">
      <summary>
            Mark field to be stored as a string with unlimited length 
            </summary>
      <param name="field">Name of field or automatic property</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.Configurator.AddDocument(System.String,System.Type)">
      <summary>
            Mark a field or automatic property of a certain Type to be serialized as a Document ,it can be added also by using Attribute: Sqo.Attributes.Document;
            both ways of set as Document are similar
            </summary>
      <param name="field">Field name or automatic property name</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.Configurator.PropertyUseField(System.String,System.String,System.Type)">
      <summary>
            Set the name of backing field for a property in case engine cannto discover it, this also can be set by attribute: Sqo.Attributes.UseVariable
            </summary>
      <param name="propertyName">Name of property</param>
      <param name="fieldName">Name of backing field of property</param>
      <param name="type">
      </param>
    </member>
    <member name="M:Sqo.Configurator.SetEncryptionPassword(System.String)">
      <summary>
            Set the password for encryption algorithm used to encrypt database data
            </summary>
      <param name="pwd">The password</param>
    </member>
    <member name="M:Sqo.Configurator.SetEncryptor(Sqo.Encryption.IEncryptor)">
      <summary>
            Set your custom encryption algorithm that implemets IEncryptor interface
            </summary>
      <param name="encryptor">The instance of custom encryption algorithm</param>
    </member>
    <member name="M:Sqo.Configurator.SetEncryptor(Sqo.BuildInAlgorithm)">
      <summary>
            Set build-in encryption algorithm 
            </summary>
      <param name="alg">Encryption algorithm</param>
    </member>
    <member name="M:Sqo.Configurator.SetDatabaseFileName``1(System.String)">
      <summary>
            Set custom fileName on disk of database file for Type T
            </summary>
      <typeparam name="T">Type of objects</typeparam>
      <param name="fileName">Name of database file on disk</param>
    </member>
    <member name="M:Sqo.Configurator.SetDatabaseFileName(System.Type,System.String)">
      <summary>
            Set custom fileName on disk of database file for Type 
            </summary>
      <param name="type">Type of objects</param>
      <param name="fileName">Name of database file on disk</param>
    </member>
    <member name="M:Sqo.Configurator.LoadRelatedObjects``1(System.Boolean)">
      <summary>
            By default this is true for all types. Set this to false to not load childs entities of objects of Type provided
            </summary>
      <typeparam name="T">Type for objects</typeparam>
      <param name="loadRelatedObjects">true if related object need to be loaded, false if you want to load by Include(...) method</param>
    </member>
    <member name="M:Sqo.Configurator.LoadRelatedObjects(System.Type,System.Boolean)">
      <summary>
            By default this is true for all types. Set this to false to not load childs entities of objects of Type provided
            </summary>
      <param name="type">Type for objects</param>
      <param name="loadRelatedObjects">true if related object need to be loaded, false if you want to load by Include(...) method</param>
    </member>
    <member name="M:Sqo.Configurator.SetLicense(System.String)">
      <summary>
            Set the license key
            </summary>
      <param name="licenseKey">License key</param>
    </member>
    <member name="M:Sqo.Configurator.SetRaiseLoadEvents(System.Boolean)">
      <summary>
            Set true to raise Loading/Loaded events
            </summary>
      <param name="raiseLoadEvents">
      </param>
    </member>
    <member name="M:Sqo.Configurator.SetDocumentSerializer(Sqo.IDocumentSerializer)">
      <summary>
            Set your custom document serializer
            </summary>
      <param name="documentSerializer">The instance of custom document serializer</param>
    </member>
    <member name="P:Sqo.Configurator.EncryptedDatabase">
      <summary>
            Set if database will be encrypted or not
            </summary>
    </member>
    <member name="T:Sqo.IObjectList`1">
      <summary>
            Main interface to be used by implementers to retrieve objects from database
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:Sqo.MetaField">
      <summary>
            Class that describe a field of an object stored in database
            </summary>
    </member>
    <member name="P:Sqo.MetaField.Name">
      <summary>
            Name of field stored in database
            </summary>
    </member>
    <member name="P:Sqo.MetaField.FieldType">
      <summary>
            Type of field stored in database
            </summary>
    </member>
    <member name="T:Sqo.MetaType">
      <summary>
            Class that describe Type of objects  stored in database
            </summary>
    </member>
    <member name="P:Sqo.MetaType.Name">
      <summary>
            Name of Type stored in database
            </summary>
    </member>
    <member name="P:Sqo.MetaType.Fields">
      <summary>
            List of fields
            </summary>
    </member>
    <member name="T:Sqo.Internal._bs">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._b(System.String)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
      <param name="p">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Internal._bs._ofm(System.String,System.String)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
      <param name="p">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Internal._bs._uf(Sqo.Siaqodb,System.Int32,Sqo.MetaType,System.String,System.Object)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._gd(Sqo.Siaqodb,System.Type)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._do(Sqo.Siaqodb,System.Int32,Sqo.MetaType)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._io(Sqo.Siaqodb,Sqo.MetaType)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._sdbfn(Sqo.Siaqodb,Sqo.MetaType,System.String)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._loidtid(Sqo.Siaqodb,System.Int32,Sqo.MetaType,System.String,System.Collections.Generic.List{System.Int32}@,System.Int32@)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._ltid(Sqo.Siaqodb,System.Int32,Sqo.MetaType,System.String,System.Int32@,System.Boolean@)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._loidby(Sqo.Siaqodb,System.String,System.Object)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._lobjby(Sqo.Siaqodb,System.Type,System.Int32)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._hsy">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._hamssy">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._sanc(Sqo.Siaqodb,System.Byte[],System.String)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._ganc(Sqo.Siaqodb,System.String)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="M:Sqo.Internal._bs._danc(Sqo.Siaqodb,System.String)">
      <summary>
            Do NOT use it!, it is used only internally
            </summary>
    </member>
    <member name="T:LightningDB.EnvironmentOpenFlags">
      <summary>
            Options to open LMDB environment
            </summary>
    </member>
    <member name="F:LightningDB.EnvironmentOpenFlags.None">
      <summary>
            No special options.
            </summary>
    </member>
    <member name="F:LightningDB.EnvironmentOpenFlags.FixedMap">
      <summary>
            MDB_FIXEDMAP. use a fixed address for the mmap region. 
            This flag must be specified when creating the environment, and is stored persistently in the environment. 
            If successful, the memory map will always reside at the same virtual address and pointers used to reference data items in the database will be constant across multiple invocations. 
            This option may not always work, depending on how the operating system has allocated memory to shared libraries and other uses. 
            The feature is highly experimental.
            </summary>
    </member>
    <member name="F:LightningDB.EnvironmentOpenFlags.NoSubDir">
      <summary>
            MDB_NOSUBDIR. By default, MDB creates its environment in a directory whose pathname is given in path, and creates its data and lock files under that directory. 
            With this option, path is used as-is for the database main data file. 
            The database lock file is the path with "-lock" appended.
            </summary>
    </member>
    <member name="F:LightningDB.EnvironmentOpenFlags.NoSync">
      <summary>
            MDB_NOSYNC. Don't flush system buffers to disk when committing a transaction. 
            This optimization means a system crash can corrupt the database or lose the last transactions if buffers are not yet flushed to disk. 
            The risk is governed by how often the system flushes dirty buffers to disk and how often mdb_env_sync() is called. 
            However, if the filesystem preserves write order and the MDB_WRITEMAP flag is not used, transactions exhibit ACI (atomicity, consistency, isolation) properties and only lose D (durability). 
            I.e. database integrity is maintained, but a system crash may undo the final transactions. 
            Note that (MDB_NOSYNC | MDB_WRITEMAP) leaves the system with no hint for when to write transactions to disk, unless mdb_env_sync() is called. 
            (MDB_MAPASYNC | MDB_WRITEMAP) may be preferable. 
            This flag may be changed at any time using mdb_env_set_flags().
            </summary>
    </member>
    <member name="F:LightningDB.EnvironmentOpenFlags.ReadOnly">
      <summary>
            MDB_RDONLY. Open the environment in read-only mode. 
            No write operations will be allowed. 
            MDB will still modify the lock file - except on read-only filesystems, where MDB does not use locks.
            </summary>
    </member>
    <member name="F:LightningDB.EnvironmentOpenFlags.NoMetaSync">
      <summary>
            MDB_NOMETASYNC. Flush system buffers to disk only once per transaction, omit the metadata flush. 
            Defer that until the system flushes files to disk, or next non-MDB_RDONLY commit or mdb_env_sync(). 
            This optimization maintains database integrity, but a system crash may undo the last committed transaction. 
            I.e. it preserves the ACI (atomicity, consistency, isolation) but not D (durability) database property. 
            This flag may be changed at any time using mdb_env_set_flags().
            </summary>
    </member>
    <member name="F:LightningDB.EnvironmentOpenFlags.WriteMap">
      <summary>
            MDB_WRITEMAP Use a writeable memory map unless MDB_RDONLY is set. 
            This is faster and uses fewer mallocs, but loses protection from application bugs like wild pointer writes and other bad updates into the database. 
            Incompatible with nested transactions.
            </summary>
    </member>
    <member name="F:LightningDB.EnvironmentOpenFlags.MapAsync">
      <summary>
            MDB_MAPASYNC. When using MDB_WRITEMAP, use asynchronous flushes to disk. 
            As with MDB_NOSYNC, a system crash can then corrupt the database or lose the last transactions. 
            Calling mdb_env_sync() ensures on-disk database integrity until next commit. 
            This flag may be changed at any time using mdb_env_set_flags().
            </summary>
    </member>
    <member name="F:LightningDB.EnvironmentOpenFlags.NoThreadLocalStorage">
      <summary>
            MDB_NOTLS. tie reader locktable slots to MDB_txn objects instead of to threads
            </summary>
    </member>
    <member name="F:LightningDB.EnvironmentOpenFlags.NoLock">
      <summary>
            MDB_NOLOCK. don't do any locking, caller must manage their own locks
            </summary>
    </member>
    <member name="F:LightningDB.EnvironmentOpenFlags.NoReadAhead">
      <summary>
            MDB_NORDAHEAD. don't do readahead (no effect on Windows)
            </summary>
    </member>
    <member name="F:LightningDB.EnvironmentOpenFlags.NoMemoryInitialization">
      <summary>
            MDB_NOMEMINIT. don't initialize malloc'd memory before writing to datafile
            </summary>
    </member>
    <member name="T:Sqo.SiaqodbConfigurator">
      <summary>
            Class responsible for configurations of Siaqodb database engine
            </summary>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.AddIndex(System.String,System.Type)">
      <summary>
            Add an index for a field or automatic property of a certain Type,an Index can be added also by using Attribute: Sqo.Attributes.Index;
            both ways of adding index are similar
            </summary>
      <param name="field">Field name or automatic property name</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.AddUniqueConstraint(System.String,System.Type)">
      <summary>
            Add an UniqueConstraint for a field of a certain Type,an UniqueConstraint can be added also by using Attribute: Sqo.Attributes.UniqueConstraint;
            both ways of adding UniqueConstraint are similar
            </summary>
      <param name="field">Field name or automatic property name</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.AddLazyLoadField(System.String,System.Type)">
      <summary>
            Mark a field as LazyLoad, LazyLoad field can be marked also by using Attribute: Sqo.Attributes.LazyLoad
            </summary>
      <param name="field">Field name or automatic property name</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.AddMaxLength(System.String,System.Int32,System.Type)">
      <summary>
            Put MaxLength for a string field or automatic property of a Type, MaxLength can be set also by using Attribute: Sqo.Attributes.MaxLength
            </summary>
      <param name="field">Field name or automatic property name</param>
      <param name="maxLength">max length for a string</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.AddIgnore(System.String,System.Type)">
      <summary>
            Ignore a field or automatic property to be stored
            </summary>
      <param name="field">Name of field or automatic property</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.AddText(System.String,System.Type)">
      <summary>
            Mark field to be stored as a string with unlimited length 
            </summary>
      <param name="field">Name of field or automatic property</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.AddDocument(System.String,System.Type)">
      <summary>
            Mark a field or automatic property of a certain Type to be serialized as a Document ,it can be added also by using Attribute: Sqo.Attributes.Document;
            both ways of set as Document are similar
            </summary>
      <param name="field">Field name or automatic property name</param>
      <param name="type">Type that declare the field</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.PropertyUseField(System.String,System.String,System.Type)">
      <summary>
            Set the name of backing field for a property in case engine cannto discover it, this also can be set by attribute: Sqo.Attributes.UseVariable
            </summary>
      <param name="propertyName">Name of property</param>
      <param name="fieldName">Name of backing field of property</param>
      <param name="type">
      </param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetEncryptionPassword(System.String)">
      <summary>
            Set the password for encryption algorithm used to encrypt database data
            </summary>
      <param name="pwd">The password</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetEncryptor(Sqo.Encryption.IEncryptor)">
      <summary>
            Set your custom encryption algorithm that implemets IEncryptor interface
            </summary>
      <param name="encryptor">The instance of custom encryption algorithm</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetEncryptor(Sqo.BuildInAlgorithm)">
      <summary>
            Set build-in encryption algorithm 
            </summary>
      <param name="alg">Encryption algorithm</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetDatabaseFileName``1(System.String)">
      <summary>
            Set custom fileName on disk of database file for Type T
            </summary>
      <typeparam name="T">Type of objects</typeparam>
      <param name="fileName">Name of database file on disk</param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Sqo.SiaqodbConfigurator.SetDatabaseFileName(System.Type,System.String)" -->
    <member name="M:Sqo.SiaqodbConfigurator.LoadRelatedObjects``1(System.Boolean)">
      <summary>
            By default this is true for all types. Set this to false to not load childs entities of objects of Type provided
            </summary>
      <typeparam name="T">Type for objects</typeparam>
      <param name="loadRelatedObjects">true if related object need to be loaded, false if you want to load by Include(...) method</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.LoadRelatedObjects(System.Type,System.Boolean)">
      <summary>
            By default this is true for all types. Set this to false to not load childs entities of objects of Type provided
            </summary>
      <param name="type">Type for objects</param>
      <param name="loadRelatedObjects">true if related object need to be loaded, false if you want to load by Include(...) method</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetLicense(System.String)">
      <summary>
            Set the license key
            </summary>
      <param name="licenseKey">License key</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetRaiseLoadEvents(System.Boolean)">
      <summary>
            Set true to raise Loading/Loaded events
            </summary>
      <param name="raiseLoadEvents">
      </param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.SetDocumentSerializer(Sqo.IDocumentSerializer)">
      <summary>
            Set your custom document serializer
            </summary>
      <param name="documentSerializer">The instance of custom document serializer</param>
    </member>
    <member name="M:Sqo.SiaqodbConfigurator.ApplyConfigurator(Sqo.Configurator)">
      <summary>
            Apply default configurations
            </summary>
      <param name="config">Configurator instance</param>
    </member>
    <member name="P:Sqo.SiaqodbConfigurator.EncryptedDatabase">
      <summary>
            Set if database will be encrypted or not
            </summary>
    </member>
    <member name="T:Sqo.SqoDataObject">
      <summary>
            Basic class that any siaqodb storable class may inherits from 
            </summary>
    </member>
    <member name="P:Sqo.SqoDataObject.OID">
      <summary>
            Object Identifier(unique per Type)
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Sqo.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})" -->
    <!-- Badly formed XML comment ignored for member "T:Sqo.Evaluator.SubtreeEvaluator" -->
    <!-- Badly formed XML comment ignored for member "T:Sqo.Evaluator.Nominator" -->
    <member name="T:Sqo.Siaqodb">
      <summary>
            Main class of siaqodb database engine responsible for storing, retrieving ,deleting objects on database files
            </summary>
    </member>
    <member name="M:Sqo.Siaqodb.#ctor">
      <summary>
            Create a new instance of Siaqodb, database is not opened yet
            </summary>
    </member>
    <member name="M:Sqo.Siaqodb.#ctor(System.String)">
      <summary>
            Create a new instance of Siaqodb and open the database
            </summary>
      <param name="path">Physical folder name where objects are stored</param>
    </member>
    <member name="M:Sqo.Siaqodb.#ctor(System.String,System.Int64)">
      <summary>
            Create a new instance of Siaqodb and open the database with a maximum size defined 
            </summary>
      <param name="path">Physical folder name where objects are stored</param>
      <param name="maxDatabaseSize">max database size in bytes (default 50 MB )</param>
    </member>
    <member name="M:Sqo.Siaqodb.#ctor(System.String,System.Int64,System.Int32)">
      <summary>
            Create a new instance of Siaqodb and open the database with a maximum size defined and provided number of sub-databases
            </summary>
      <param name="path">Physical folder name where objects are stored</param>
      <param name="maxDatabaseSize">max database size in bytes (default 50 MB )</param>
      <param name="maxSubDatabases">max number of subdatabases(default 50); two subdatabases are created per Type; every index will use a separate subdatabase</param>
    </member>
    <member name="M:Sqo.Siaqodb.Open(System.String)">
      <summary>
            Open database 
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Sqo.Siaqodb.Open(System.String,System.Int64,System.Int32)">
      <summary>
            Open database 
            </summary>
      <param name="path">database folder</param>
      <param name="maxDatabaseSize">max database size in bytes (default 50 MB )</param>
      <param name="maxSubDatabases">max number of subdatabases(default 50); two subdatabases are created per Type; every index will use a separate subdatabase</param>
    </member>
    <member name="M:Sqo.Siaqodb.StoreObject(System.Object)">
      <summary>
            Insert or update object; if object is loaded from database and this method is called then update will occur, if object is new created then insert will occur
            </summary>
      <param name="obj">Object to be stored</param>
    </member>
    <member name="M:Sqo.Siaqodb.StoreObjectPartially(System.Object,System.String[])">
      <summary>
             Insert or update object partially, only provided properties are saved
            </summary>
      <param name="obj">object of which properties will be stored</param>
      <param name="properties">properties to be stored</param>
    </member>
    <member name="M:Sqo.Siaqodb.StoreObjectPartially(System.Object,System.Boolean,System.String[])">
      <summary>
              Insert or update object partially, only provided properties are saved 
             </summary>
      <param name="obj">object of which properties will be stored</param>
      <param name="properties">properties to be stored</param>
      <param name="onlyReferences">if true,it will store only references to complex objects</param>
    </member>
    <member name="M:Sqo.Siaqodb.StoreObject(System.Object,Sqo.Transactions.ITransaction)">
      <summary>
            Insert or update object by a Transaction; if object is loaded from database and this method is called then update will occur, if object is new created then insert will occur
            </summary>
      <param name="obj">Object to be stored</param>
      <param name="transaction">Transaction object</param>
    </member>
    <member name="M:Sqo.Siaqodb.LoadAll``1">
      <summary>
            Load all objects of Type provided
            </summary>
      <typeparam name="T">Type of objects to be loaded from database</typeparam>
      <returns>List of objects retrieved from database</returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadObjectByOID``1(System.Int32)">
      <summary>
            Load object from database by OID provided
            </summary>
      <typeparam name="T">The Type of object to be loaded</typeparam>
      <param name="oid">oid of object</param>
      <returns>the object stored in database with oid provided</returns>
    </member>
    <member name="M:Sqo.Siaqodb.Close">
      <summary>
            Close database
            </summary>
    </member>
    <member name="M:Sqo.Siaqodb.Flush">
      <summary>
            Flush buffered data to database
            </summary>
    </member>
    <member name="M:Sqo.Siaqodb.Cast``1">
      <summary>
            Cast method to be used in LINQ queries
            </summary>
      <typeparam name="T">Type over which LINQ will take action</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.Query``1">
      <summary>
            Query method to be used in LINQ queries
            </summary>
      <typeparam name="T">Type over which LINQ will take action</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadOids``1(System.Linq.Expressions.Expression)">
      <summary>
            Load OIDs by expression
            </summary>
      <typeparam name="T">Type for which OIDs will be loaded</typeparam>
      <param name="expression">filter expression</param>
      <returns>List of OIDs</returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadAllOIDs(Sqo.MetaType)">
      <summary>
            Load all object OIDs of MetaType provided
            </summary>
      <param name="type">meta type Load by method GetAllTypes()</param>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadValue(System.Int32,System.String,Sqo.MetaType)">
      <summary>
            Load value of a field of an object identified by OID provided
            </summary>
      <param name="oid">OID of object</param>
      <param name="fieldName">fieldName</param>
      <param name="mt">MetaType</param>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.Delete(System.Object)">
      <summary>
            Delete an object from database
            </summary>
      <param name="obj">Object to be deleted</param>
    </member>
    <member name="M:Sqo.Siaqodb.Delete(System.Object,Sqo.Transactions.ITransaction)">
      <summary>
            Delete an object from database using a Transaction
            </summary>
      <param name="obj">Object to be deleted</param>
      <param name="transaction">Transaction</param>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectBy(System.String,System.Object)">
      <summary>
            Delete an object from database by a certain field(ex:ID that come from server)
            </summary>
      <param name="obj">Object to be deleted</param>
      <param name="fieldName">Names of field that this method will lookup for object to delete it</param>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectBy(System.Object,System.String[])">
      <summary>
            Delete an object from database by a certain field(ex:ID that come from server)
            </summary>
      <param name="obj">Object to be deleted</param>
      <param name="fieldNames">Names of fields that this method will lookup for object to delete it</param>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectBy(System.Object,Sqo.Transactions.ITransaction,System.String[])">
      <summary>
            Delete an object from database by a certain field(ex:ID that come from server)
            </summary>
      <param name="obj">Object to be deleted</param>
      <param name="fieldNames">Names of fields that this method will lookup for object to delete it</param>
      <param name="transaction">Transaction object</param>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectBy(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Delete an object from database by a criteria
            </summary>
      <param name="criteria">Pairs of fields-values to lookup for object to delete it</param>
      <returns>Number of objects deleted</returns>
    </member>
    <member name="M:Sqo.Siaqodb.DeleteObjectBy``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Delete an object from database by a criteria
            </summary>
      <param name="criteria">Pairs of fields-values to lookup for object to delete it</param>
      <returns>Number of objects deleted</returns>
    </member>
    <member name="M:Sqo.Siaqodb.DropType``1">
      <summary>
            Delete all objects of Type provided
            </summary>
      <typeparam name="T">Type of objects to be deleted</typeparam>
    </member>
    <member name="M:Sqo.Siaqodb.DropType(System.Type)">
      <summary>
            Delete all objects of Type provided
            </summary>
      <param name="type">Type of objects to be deleted</param>&gt;
        </member>
    <member name="M:Sqo.Siaqodb.DropType(System.Type,Sqo.Transactions.ITransaction)">
      <summary>
            Delete all objects of Type provided
            </summary>
      <param name="type">Type of objects to be deleted</param>&gt;
        </member>
    <member name="M:Sqo.Siaqodb.GetAllTypes">
      <summary>
            Return all Types from database folder
            </summary>
      <returns>List of MetaType objects</returns>
    </member>
    <member name="M:Sqo.Siaqodb.Count``1">
      <summary>
            Return number of objects of Type provided
            </summary>
      <typeparam name="T">Type of objects</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Sqo.Siaqodb.UpdateObjectBy(System.String,System.Object)">
      <summary>
            Update an object in database by a certain Field(eq: ID that come from a server)
            </summary>
      <param name="fieldName">FieldName by which update is made(eq an ID)</param>
      <param name="obj">object that has all values but not OID to update it in database</param>
      <returns>true if object was updated and false if object was not found in database</returns>
    </member>
    <member name="M:Sqo.Siaqodb.UpdateObjectBy(System.Object,System.String[])">
      <summary>
            Update an object in database by certain Fields(eq: ID that come from a server)
            </summary>
      <param name="fieldNames">name of fields by which update is made(eq an ID)</param>
      <param name="obj">object that has all values but not OID to update it in database</param>
      <returns>true if object was updated and false if object was not found in database</returns>
    </member>
    <member name="M:Sqo.Siaqodb.UpdateObjectBy(System.Object,Sqo.Transactions.ITransaction,System.String[])">
      <summary>
            Update an object in database by certain Fields(eq: ID that come from a server)
            </summary>
      <param name="fieldNames">name of fields by which update is made(eq an ID)</param>
      <param name="obj">object that has all values but not OID to update it in database</param>
      <param name="transaction">Transaction object</param>
      <returns>true if object was updated and false if object was not found in database</returns>
    </member>
    <member name="M:Sqo.Siaqodb.GetDBPath">
      <summary>
            return current database path
            </summary>
      <returns>The database folder path</returns>
    </member>
    <member name="M:Sqo.Siaqodb.BeginTransaction">
      <summary>
            Start a database Transaction to be used on insert/update/delete objects
            </summary>
      <returns> Transaction object</returns>
    </member>
    <member name="M:Sqo.Siaqodb.LoadAllLazy``1">
      <summary>
            Load all objects in Lazy mode, objects are activated/read from db when it is accessed
            by index or by enumerator
            </summary>
      <typeparam name="T">Type of objects to be loaded from database</typeparam>
      <returns>LazyObjectList of objects</returns>
    </member>
    <member name="M:Sqo.Siaqodb.GetOID(System.Object)">
      <summary>
            Get OID of object, if the Type of object has not defined OID property then object and OID are weak cached during object load from database and this value is returned,
            otherwise it is returned value of the OID property 
            </summary>
      <param name="obj">The object for which OID is returned</param>
      <returns>The OID associated with object that is stored in database</returns>
    </member>
    <member name="E:Sqo.Siaqodb.SavingObject">
      <summary>
            Raised before an object is saved in database
            </summary>
    </member>
    <member name="E:Sqo.Siaqodb.SavedObject">
      <summary>
            Raised after an object is saved in database
            </summary>
    </member>
    <member name="E:Sqo.Siaqodb.DeletingObject">
      <summary>
            Raised before an object is deleted from database
            </summary>
    </member>
    <member name="E:Sqo.Siaqodb.DeletedObject">
      <summary>
            Raised after an object is deleted from database
            </summary>
    </member>
    <member name="E:Sqo.Siaqodb.LoadingObject">
      <summary>
            Raised before an object is loaded from database
            </summary>
    </member>
    <member name="E:Sqo.Siaqodb.LoadedObject">
      <summary>
            Raised after object is loaded from database
            </summary>
    </member>
    <member name="P:Sqo.Siaqodb.Stat.UsedSize">
      <summary>
            Database used size (in bytes)
            </summary>
    </member>
    <member name="P:Sqo.Siaqodb.Stat.MaxSize">
      <summary>
            Max database size ( in bytes)
            </summary>
    </member>
    <member name="P:Sqo.Siaqodb.Stat.MaxSubDatabases">
      <summary>
            Max sub databases, Siaqodb use 2 sub-databases per Type and an additional sub-database for each index
            </summary>
    </member>
    <member name="P:Sqo.Siaqodb.Stat.Path">
      <summary>
            Full db folder path
            </summary>
    </member>
    <member name="P:Sqo.Siaqodb.Stat.FreeSpace">
      <summary>
            Free space (in bytes)
            </summary>
    </member>
    <member name="M:Sqo.SqoStringExtensions.Contains(System.String,System.String,System.StringComparison)">
      <summary>
             Returns a value indicating whether the specified System.String object occurs
               within this string.A parameter specifies the type of search
                to use for the specified string.
            </summary>
      <param name="stringObj">Input string</param>
      <param name="value">The string to seek.</param>
      <param name="comparisonType"> One of the enumeration values that specifies the rules for the search.</param>
      <returns>true if the value parameter occurs within this string, or if value is the
                empty string (""); otherwise, false.</returns>
    </member>
    <member name="T:Sqo.ObjectList`1">
      <summary>
            List used to retrieve objects from database
            </summary>
      <typeparam name="T">Type of objects from list</typeparam>
    </member>
    <member name="M:Sqo.Transactions.Transaction.Commit">
      <summary>
            Commit transaction to database
            </summary>
    </member>
    <member name="M:Sqo.Transactions.Transaction.Rollback">
      <summary>
            Rollback changes
            </summary>
    </member>
  </members>
</doc>